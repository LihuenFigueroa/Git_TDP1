/*
 * @brief EDU-CIAA-NXP board file
 *
 * @note
 * Copyright(C) Ernesto Gigliotti <ernestogiglotti@gmail.com>, 2016
 * Copyright(C) Marin Ribelotta, 2015
 * Copyright(C) NXP Semiconductors, 2013
 * All rights reserved.
 *
 * @par
 * Software that is described herein is for illustrative purposes only
 * which provides customers with programming information regarding the
 * LPC products.  This software is supplied "AS IS" without any warranties of
 * any kind, and NXP Semiconductors and its licensor disclaim any and
 * all warranties, express or implied, including all implied warranties of
 * merchantability, fitness for a particular purpose and non-infringement of
 * intellectual property rights.  NXP Semiconductors assumes no responsibility
 * or liability for the use of the software, conveys no license or rights under any
 * patent, copyright, mask work right, or any other intellectual property rights in
 * or to any products. NXP Semiconductors reserves the right to make changes
 * in the software without notification. NXP Semiconductors also makes no
 * representation or warranty that such application will be suitable for the
 * specified use without further testing or modification.
 *
 * @par
 * Permission to use, copy, modify, and distribute this software and its
 * documentation is hereby granted, under NXP Semiconductors' and its
 * licensor's relevant copyrights in the software, without fee, provided that it
 * is used in conjunction with NXP Semiconductors microcontrollers.  This
 * copyright, permission, and disclaimer notice must appear in all copies of
 * this code.
 */

#ifndef __BOARD_H_
#define __BOARD_H_

#include "chip.h"
#include "sapi.h"
/* board_api.h is included at the bottom of this file after DEBUG setup */

#ifndef __SECTION_EXT
#define __SECTION_EXT(type, bank, name) __attribute__ ((section("." #type ".$" #bank "." #name)))
#endif

#ifndef __SECTION
#define __SECTION(type, bank) __attribute__ ((section("." #type ".$" #bank)))
#endif

#ifndef __DATA_EXT
#define __DATA_EXT(bank, name) __SECTION_EXT(data, bank, name)
#endif

#ifndef __DATA
#define __DATA(bank) __SECTION(data, bank)
#endif

#ifdef __cplusplus
extern "C" {
#endif

/** Define DEBUG_ENABLE to enable IO via the DEBUGSTR, DEBUGOUT, and
    DEBUGIN macros. If not defined, DEBUG* functions will be optimized
	out of the code at build time.
 */
#define DEBUG_ENABLE

/** Define DEBUG_SEMIHOSTING along with DEBUG_ENABLE to enable IO support
    via semihosting. You may need to use a C library that supports
	semihosting with this option.
 */
//#define DEBUG_SEMIHOSTING

/** Board UART used for debug output and input using the DEBUG* macros. This
    is also the port used for Board_UARTPutChar, Board_UARTGetChar, and
	Board_UARTPutSTR functions. */
#define DEBUG_UART LPC_USART2

/**
 * @}
 */

/* Board name */
#define BOARD_CIAA_EDU_NXP_4337




/* GPIOs */
#define BOARD_GPIO_MODE_INPUT		0
#define BOARD_GPIO_MODE_OUTPUT_PP	1
#define BOARD_GPIO_MODE_OUTPUT_OD	2

#define BOARD_GPIO_NOPULL		0
#define BOARD_GPIO_PULLUP		1
#define BOARD_GPIO_PULLDOWN		2

#define GPIO_MAX_NUMBER		8



/**
 * @brief   Initializes all board periferals
 * @return  Nothing
 */
void Board_Init(void);
/**
 * @brief	Sets up board specific I2C interface
 * @param	id	: I2C Peripheral ID (I2C0, I2C1)
 * @return	Nothing
 */

/**
 * @brief       Write a byte in EEPROM memory
 * @param       addr : Address relative to eeprom start (0x0000 to 0x3F7F)
 * @param       value : Byte to be written in specified address
 * @return      0: OK, -1: invalid address
 */
int32_t Board_EEPROM_writeByte(uint32_t addr,uint8_t value);

/**
 * @brief       Read a byte from EEPROM memory
 * @param       addr : Address relative to eeprom start (0x0000 to 0x3F7F)
 * @return      byte value read or -1 if address is invalid
 */
int32_t Board_EEPROM_readByte(uint32_t addr);
\
#ifdef __cplusplus
}
#endif

#endif /* __BOARD_H_ */
